"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import django_heroku
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

IS_PRODUCTION = False
try:
    if os.environ['BUILD'] == "PRODUCTION":
        IS_PRODUCTION = True
except:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = os.environ['SECRET_KEY']
except:
    SECRET_KEY = 'hk98ysgyusdyihsfyiuwhsgyckjsbjvgh2ufikh@J'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not IS_PRODUCTION

ALLOWED_HOSTS = ['dphenotype.herokuapp.com', 'localhost']

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

import dj_database_url
#DATABASES = {}
#DATABASES['default'] = dj_database_url.config()

if "DB_NAME" in os.environ and "DB_HOST" in os.environ and "DB_PASS" in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get('DB_NAME', 'default'),
            'USER': os.environ.get('DB_USER', 'default'),
            'PASSWORD': os.environ.get('DB_PASS'),
            'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
            'PORT': os.environ.get('DB_PORT', ''),
            'CONN_MAX_AGE': 600,
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


#DATABASES['default']['CONN_MAX_AGE'] = None


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

THRESHOLD_EMAIL = os.environ.get('THRESHOLD_EMAIL', 'eric.schlossberg@gmail.com')

try:
    CELERY_BROKER_URL = os.environ['CLOUDAMQP_URL']
except:
    CELERY_BROKER_URL = "sqs://"
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'region': 'us-east-1',
    'polling_interval': 5,
    'visibility_timeout': 7200,
}
CELERY_SEND_TASK_ERROR_EMAILS = True
CELERY_TASK_DEFAULT_QUEUE = 'config'
CELERY_WORKER_ENABLE_REMOTE_CONTROL = False
CELERY_WORKER_SEND_TASK_EVENTS = False

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = None
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_BROKER_POOL_LIMIT = 3

#SendGrid (using SMTP)
SENDGRID_EMAIL_HOST = 'smtp.sendgrid.net'

"""
CLOUDMAILIN_HOST = 'smtp.cloudmta.net'
CLOUDMAILIN_USERNAME = '118c506dea731b2f'
CLOUDMAILIN_PASSWORD = 'NEAxsNf6FH5oxyWLyhMa55zX'
CLOUDMAILIN_EMAIL_PORT = 587
CLOUDMAILIN_EMAIL_USE_TLS = True
EMAIL_CLIENT = "CLOUDMAILIN"

SMTP_HOST = CLOUDMAILIN_HOST
SMTP_PORT = CLOUDMAILIN_EMAIL_PORT
SMTP_USER = CLOUDMAILIN_USERNAME
SMTP_PASSWORD = CLOUDMAILIN_PASSWORD
SMTP_USE_TLS = CLOUDMAILIN_EMAIL_USE_TLS
"""

# keep on bottom
""" #UNCOMMENT IF USING AWS RDS databases
if IS_PRODUCTION:
    django_heroku.settings(locals())
    del DATABASES['default']['OPTIONS']['sslmode']
"""
